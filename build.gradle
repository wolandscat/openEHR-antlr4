plugins {
    id 'java'
    id 'antlr'
}

group = 'org.openehr.antlr4'
version = '0.1.0'

subprojects {
    apply plugin: 'java'
    apply plugin: 'antlr'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    repositories {
        mavenCentral()
        gradlePluginPortal()
    }

    ext.reflectionsVersion = '0.10.2'
    ext.antlrVersion = '4.13.1'
    ext.jUnitVersion = '6.0.0'
    ext.slf4jVersion = '2.0.17'
    ext.guavaVersion = '33.4.8'
    ext.commonsIoVersion = '2.20.0'

    dependencies {
        antlr "org.antlr:antlr4:${antlrVersion}"
        api "org.antlr:antlr4-runtime:${antlrVersion}"

        implementation "org.reflections:reflections:${reflectionsVersion}"

        implementation ("commons-io:commons-io:${commonsIoVersion}"){
            exclude group: 'commons-logging', module: 'commons-logging'
        }

        implementation 'org.apache.commons:commons-text:1.14.0'
        implementation 'org.apache.commons:commons-lang3:3.18.0'

        implementation "com.google.guava:guava:${guavaVersion}-jre"

        api "org.slf4j:slf4j-api:${slf4jVersion}"
        implementation "org.slf4j:slf4j-simple:${slf4jVersion}"

        testImplementation "org.junit.jupiter:junit-jupiter-api:${jUnitVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${jUnitVersion}"
        testRuntimeOnly "org.junit.platform:junit-platform-launcher"
    }

    generateGrammarSource {
        maxHeapSize = "128m"
        arguments += ['-package', 'org.openehr.antlr4', '-visitor', '-listener']
        outputDirectory = file("$buildDir/generated-src/antlr/main/org/openehr/antlr4")
    }

    sourceSets {
        main {
            java {
                srcDirs += file("$buildDir/generated-src/antlr/main")
            }
        }
    }

    compileJava {
        dependsOn generateGrammarSource
        source generateGrammarSource.outputs.files, sourceSets.main.java
        options.encoding = 'UTF-8'
    }

    clean {
        delete "$buildDir/generated-src"
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

}